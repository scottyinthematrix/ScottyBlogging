<?xml version="1.0"?>
<configuration>

	<section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
	<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
		<alias alias="Entlib" type="Microsoft.Practices.EnterpriseLibrary"/>
		<alias alias="Logging" type="Entlib.Logging"/>
		<assembly name="ScottyApps.ScottyBlogging.Biz" />
		<assembly name="ScottyApps.ScottyBlogging.Entity"/>
		<container>
			<extension type="Interception"/>

			<register type="BloggingContext">
				<lifetime type="transient"/>
				<constructor>
					<param type="string" value="Blogging"></param>
				</constructor>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>

			<!-- BloggingBiz : Singleton -->
			<register type="BloggingBiz">
				<lifetime type="singleton" />
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior" isDefaultForType="true"/>
			</register>

			<register type="EntityBase">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>

			<register type="Blog">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>
			<register type="Writer">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>

			<register type="Media">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>
			<register type="MediaGroup">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>
			<register type="Audio">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>
			<register type="Graph">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>
			<register type="Vedio">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>

			<register type="Entry">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>
			<register type="Article">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>
			<register type="Gossip">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>
			<register type="Comment">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>

			<register type="Tag">
				<lifetime type="transient"/>
				<interceptor type="VirtualMethodInterceptor"/>
				<interceptionBehavior type="PolicyInjectionBehavior"/>
			</register>

			<register name="log4Biz" type="Logging.LogCallHandler">
				<constructor>
					<param dependencyName="logWriter4Biz" dependencyType="Logging.LogWriter"></param>
					
				</constructor>
			</register>

			<register name="logWriter4Biz" type="Logging.LogWriter" mapTo="Logging.LogWriterImpl">
				
			</register>
			
			
			
			
			
			<interception>
				<policy name="policy4Entity">
					<matchingRule name="rule-assembly" type="AssemblyMatchingRule">
						<constructor>
							<param name="assemblyName" value="ScottyApps.ScottyBlogging.Entity" type="string" />
						</constructor>
					</matchingRule>
					<callHandler name="log4Biz" type="Entlib.Logging.PolicyInjection.LogCallHandler">
					</callHandler>
				</policy>
			</interception>
		</container>

	</unity>

</configuration>
