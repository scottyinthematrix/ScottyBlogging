<?xml version="1.0"?>
<configuration>

  <configSections>
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging" requirePermission="true" />
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
  </configSections>
  <loggingConfiguration name="" tracingEnabled="true" defaultCategory="General">
    <listeners>
      <add name="fileListener" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging"
        listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging"
        fileName="trace.log" header="---------------------Leaving-------------------"
        footer="---------------------Entering-------------------" formatter="text"
        traceOutputOptions="LogicalOperationStack, DateTime, Timestamp, Callstack" />
    </listeners>
    <formatters>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging"
        template="Timestamp: {timestamp}{newline}&#xA;Message: {message}{newline}&#xA;Category: {category}{newline}&#xA;Title:{title}{newline}"
        name="text" />
    </formatters>
    <categorySources>
      <add switchValue="All" name="General">
        <listeners>
          <add name="fileListener" />
        </listeners>
      </add>
    </categorySources>
    <specialSources>
      <allEvents switchValue="All" name="All Events">
        <listeners>
          <add name="fileListener" />
        </listeners>
      </allEvents>
      <notProcessed switchValue="All" name="Unprocessed Category" />
      <errors switchValue="All" name="Logging Errors &amp; Warnings">
        <listeners>
          <add name="fileListener" />
        </listeners>
      </errors>
    </specialSources>
  </loggingConfiguration>
  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <!--<alias alias="Entlib" type="Microsoft.Practices.EnterpriseLibrary"/>-->
    <!--<alias alias="Logging" type="Entlib.Logging"/>-->
    <!--<assembly name="ScottyApps.ScottyBlogging.Biz" />-->
    <!--<assembly name="ScottyApps.ScottyBlogging.Entity" />-->
    <!--<alias alias="Entity" type="ScottyApps.ScottyBlogging.Entity, ScottyApps.ScottyBlogging.Entity"/>-->

    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration"/>
    <container>
      <extension type="Interception" />
      <!-- BloggingBiz : Singleton -->
      <register type="ScottyApps.ScottyBlogging.Biz.BloggingBiz, ScottyApps.ScottyBlogging.Biz">
        <lifetime type="singleton"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior" isDefaultForType="true"/>
      </register>
      <register type="ScottyApps.ScottyBlogging.Entity.BloggingContext, ScottyApps.ScottyBlogging.Entity">
        <!--<lifetime type="transient"/>-->
        <constructor>
          <param name="connStr" type="System.String" value="Blogging"></param>
        </constructor>
      </register>
		<!--
      <register type="ScottyApps.ScottyBlogging.Entity.EntityBase, ScottyApps.ScottyBlogging.Entity">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>
	  -->
      <register type="ScottyApps.ScottyBlogging.Entity.Blog, ScottyApps.ScottyBlogging.Entity">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>
      <!--<register type="Writer">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>-->
      <!--<register type="Media">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>-->
      <!--<register type="MediaGroup">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>-->
      <!--<register type="Audio">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>-->
      <!--<register type="Graph">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>-->
      <!--<register type="Vedio">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>-->
      <!--<register type="Entry">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>-->
      <!--<register type="Article">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>-->
      <!--<register type="Gossip">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>-->
      <!--<register type="Comment">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>-->
      <!--<register type="Tag">
        <lifetime type="transient"/>
        <interceptor type="VirtualMethodInterceptor"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
      </register>-->

      <!--<register name="log4Biz" type="Logging.LogCallHandler">
				<constructor>
					<param dependencyName="logWriter4Biz" dependencyType="Logging.LogWriter"></param>
					
				</constructor>
			</register>

			<register name="logWriter4Biz" type="Logging.LogWriter" mapTo="Logging.LogWriterImpl">
				
			</register>-->





      <interception>
        <policy name="policy4Entity">
          <matchingRule name="rule-assembly" type="AssemblyMatchingRule">
            <constructor>
              <param name="assemblyName" value="ScottyApps.ScottyBlogging.Entity" type="string" />
            </constructor>
          </matchingRule>
          <callHandler name="log4Entity" type="Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler, Microsoft.Practices.EnterpriseLibrary.Logging">
            <constructor>
            </constructor>
          </callHandler>
        </policy>
        <policy name="policy4Biz">
          <!--<matchingRule name="rule-assembly" type="AssemblyMatchingRule">
						<constructor>
							<param name="assemblyName" value="ScottyApps.ScottyBlogging.Biz, ScottyApps.ScottyBlogging.Biz" type="System.String" />
						</constructor>
					</matchingRule>-->
          <matchingRule name="rule-type" type="TypeMatchingRule">
            <constructor>
              <param name="typeName" type="System.String" value="ScottyApps.ScottyBlogging.Biz.BloggingBiz"></param>
            </constructor>
          </matchingRule>
          <!--<matchingRule name="rule-always" type="ScottyApps.Utilities.EntlibExtensions.AlwaysMatchingRule, ScottyApps.Utilities.EntlibExtensions">
						<constructor></constructor>
					</matchingRule>-->
          <callHandler name="log4Biz" type="Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler, Microsoft.Practices.EnterpriseLibrary.Logging">
            <constructor>
              <!-- this empty tag is important, it guides the Unity to find a constructor with no parameters -->
              <!--<param type="System.Void" name="" value=""></param>-->
            </constructor>
          </callHandler>
        </policy>

      </interception>
    </container>

  </unity>

</configuration>
